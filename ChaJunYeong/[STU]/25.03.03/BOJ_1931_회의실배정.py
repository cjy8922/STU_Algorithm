import sys
def input():
    return sys.stdin.readline().rstrip()

"""
    제안자 cjy8922

    00:08:39.910

    * 공통문제풀이 준비

    한 개의 회의실을 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들고자 함.
    각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 갯수 찾기
    
    조건 1. 중간에 중단될 수 없음
    조건 2. 끝나는 것과 동시에 다음 회의가 시작될 수 있음
    조건 3. 회의의 시작 시간과 끝나는 시간이 같을 수 있음
    입력 조건 1. 회의의 수 1 ~ 100,000
    입력 조건 2. 시작 시간과 끝나는 시간은 0 ~ 2^31 - 1

    예시:

    11
    1 4
    3 5
    0 6
    5 7
    3 8
    5 9
    6 10
    8 11
    8 12
    2 13
    12 14
    
        0  1  2  3  4  5  6  7  8  9 10 11 12 13 14
    1.     ┝━━━━━━━━┥
    2.           ├─────┤
    3.  ├─────────────────┤
    4.                 ┝━━━━━┥
    5.           ├──────────────┤
    6.                 ├───────────┤
    7.                    ├───────────┤
    8.                          ┝━━━━━━━━┥
    9.                          ├───────────┤
    10.       ├────────────────────────────────┤
    11.                                     ┝━━━━━┥

    위 조건에서 한 개의 회의실에서 최대한 많은 회의를 할 수 있는 경우는 (1, 4), (5, 7), (8, 11), (12, 14).

    풀이:
        1. 조합
            이 문제를 가장 단순하게 풀이할 수 있는 방법은, 회의들의 조합을 만들어 차례대로 회의실 안에 넣어보는 방법
            하지만, 조합의 알려진 시간 복잡도는 O(2^n)이기 때문에, 최대 100,000개나 되는 모든 회의의 조합을 만들어 확인할 수는 없음
        
        2. 최적화 탐색
            2-1. 가장 빠르게 회의를 시작하는 것이 최적의 경우라고 가정하고 풀이
                이 경우, 위 예시 또한 반례가 될 수 있는데, 일찍 시작하는 회의가 가장 늦게까지 회의를 진행하는 경우 반례가 발생할 수 있음
            2-2. 회의 시간이 짧은 회의부터 시작하는 것이 최적의 경우라고 가정
                이 경우, 다음 회의를 배정할 때 참고할 시간 기준을 정하는 것이 어렵기 때문에 최적해를 보장하는 것이 어려움
                또한, 회의 시간이 동일하다면, 이후의 선택을 합리적으로 결정할 수 있는 기준이 부족함

            2-3. 가장 빠르게 회의를 종료하는 것이 최적의 경우라고 가정하고 풀이
                많은 시간을 확보하기 위해선, 가능한 앞선 회의가 빠르게 끝나는 것부터 회의를 진행하는 것이 좋음
                그래서 종료시간 기준으로 회의들을 나열한 다음, 가장 빠르게 끝나는 회의 부터 회의실 스케쥴에 넣고,
                앞선 회의와 겹치지 않는 회의를 찾음
                
                ※ 이때, 종료 시간이 동일할 경우, 시작 시간이 빠른 회의부터 시작 → 아래와 같은 반례 때문)
                종료 시간을 기준으로만 정렬할 경우, 1번 회의부터 먼저 시작해서 2번 회의를 진행할 수 없음
                따라서 종료 시간 이후, 시작 시간 기준으로 정렬하여 2번 → 1번 → 3번 순으로 회의 진행

                    0  1  2  3
                1.        │
                2.     ├──┤
                3.        ├──┤
    
"""

# 입력
n = int(input())
meetings = [tuple(map(int, input().split())) for _ in range(n)]
meetings.sort(key=lambda x: (x[1], x[0]))   # 종료시간 / 시작시간 기준으로 오름차순 정렬

# 풀이
cnt = 0
pre_e = -1
for cur_s, cur_e in meetings:
    
    # 이전 회의가 끝나는 시점에 현재 회의가 시작할 수 있다면, 회의실 배정
    if pre_e <= cur_s:
        cnt += 1
        pre_e = cur_e
print(cnt)
